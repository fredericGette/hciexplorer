package fr.gette.hciexplorer.hciSpecification.command;

import java.util.HashMap;
import java.util.Map;

public enum CommandCode {
    INQUIRY(OpcodeGroupField.LINK_CONTROL,0x0401,"Command used to enter Inquiry mode where it discovers other Bluetooth devices."),
    INQUIRY_CANCEL(OpcodeGroupField.LINK_CONTROL,0x0402,"Command to cancel the Inquiry mode in which the Bluetooth device is in."),
    PERIODIC_INQUIRY_MODE(OpcodeGroupField.LINK_CONTROL,0x0403,"Command to set the device to enter Inquiry modes periodically according to the time interval set."),
    EXIT_PERIODIC_INQUIRY_MODE(OpcodeGroupField.LINK_CONTROL,0x0404,"Command to exit the periodic Inquiry mode"),
    CREATE_CONNECTION(OpcodeGroupField.LINK_CONTROL,0x0405,"Command to create an ACL connection to the device specified by the BD_ADDR in the parameters."),
    DISCONNECT(OpcodeGroupField.LINK_CONTROL,0x0406," Command to terminate the existing connection to a device"),
    ADD_SCO_CONNECTION(OpcodeGroupField.LINK_CONTROL,0x0407,"Create an SCO connection defined by the connection handle parameters."),
    CREATE_CONNECTION_CANCEL(OpcodeGroupField.LINK_CONTROL,0x0408,""),
    ACCEPT_CONNECTION_REQUEST(OpcodeGroupField.LINK_CONTROL,0x0409,"Command to accept a new connection request"),
    REJECT_CONNECTION_REQUEST(OpcodeGroupField.LINK_CONTROL,0x040A,"Command to reject a new connection request"),
    LINK_KEY_REQUEST_REPLY(OpcodeGroupField.LINK_CONTROL,0x040B,"Reply command to a link key request event sent from controller to the host"),
    LINK_KEY_REQUEST_NEGATIVE_REPLY(OpcodeGroupField.LINK_CONTROL,0x040C,"Reply command to a link key request event from the controller to the host if there is no link key associated with the connection."),
    PIN_CODE_REQUEST_REPLY(OpcodeGroupField.LINK_CONTROL,0x040D,"Reply command to a PIN code request event sent from a controller to the host."),
    PIN_CODE_REQUEST_NEGATIVE_REPLY(OpcodeGroupField.LINK_CONTROL,0x040E,"Reply command to a PIN code request event sent from the controller to the host if there is no PIN associated with the connection."),
    CHANGE_CONNECTION_PACKET_TYPE(OpcodeGroupField.LINK_CONTROL,0x040F,"Command to change the type of packets to be sent for an existing connection."),
    AUTHENTICATION_REQUESTED(OpcodeGroupField.LINK_CONTROL,0x0411,"Command to establish authentication between two devices specified by the connection handle."),
    SET_CONNECTION_ENCRYPTION(OpcodeGroupField.LINK_CONTROL,0x0413,"Command to enable or disable the link level encryption."),
    CHANGE_CONNECTION_LINK_KEY(OpcodeGroupField.LINK_CONTROL,0x0415,"Command to force the change of a link key to a new one between two connected devices."),
    CENTRAL_LINK_KEY(OpcodeGroupField.LINK_CONTROL,0x0417,"Command to force two devices to use the master's link key temporarily."), // aka Link_Key_Selection
    REMOTE_NAME_REQUEST(OpcodeGroupField.LINK_CONTROL,0x0419,"Command to determine the user friendly name of the connected device."),
    REMOTE_NAME_REQUEST_CANCEL(OpcodeGroupField.LINK_CONTROL,0x041A,""),
    READ_REMOTE_SUPPORTED_FEATURES(OpcodeGroupField.LINK_CONTROL,0x041B,"Command to determine the features supported by the connected device."),
    READ_REMOTE_EXTENDED_FEATURES(OpcodeGroupField.LINK_CONTROL,0x041C,""),
    READ_REMOTE_VERSION_INFORMATION(OpcodeGroupField.LINK_CONTROL,0x041D,"Command to determine the version information of the connected device."),
    READ_CLOCK_OFFSET(OpcodeGroupField.LINK_CONTROL,0x041F,"Command to read the clock offset of the remote device."),
    READ_LMP_HANDLE(OpcodeGroupField.LINK_CONTROL,0x0420,""),
    SETUP_SYNCHRONOUS_CONNECTION(OpcodeGroupField.LINK_CONTROL,0x0428,""),
    ACCEPT_SYNCHRONOUS_CONNECTION(OpcodeGroupField.LINK_CONTROL,0x0429,""),
    REJECT_SYNCHRONOUS_CONNECTION(OpcodeGroupField.LINK_CONTROL,0x042A,""),
    IO_CAPABILITY_REQUEST_REPLY(OpcodeGroupField.LINK_CONTROL,0x042B,""),
    USER_CONFIRMATION_REQUEST_REPLY(OpcodeGroupField.LINK_CONTROL,0x042C,""),
    USER_CONFIRMATION_REQUEST_NEGATIVE_REPLY(OpcodeGroupField.LINK_CONTROL,0x042D,""),
    USER_PASSKEY_REQUEST_REPLY(OpcodeGroupField.LINK_CONTROL,0x042E,""),
    USER_PASSKEY_REQUEST_NEGATIVE_REPLY(OpcodeGroupField.LINK_CONTROL,0x042F,""),
    REMOTE_OOB_DATA_REQUEST_REPLY(OpcodeGroupField.LINK_CONTROL,0x0430,""),
    REMOTE_OOB_DATA_REQUEST_NEGATIVE_REPLY(OpcodeGroupField.LINK_CONTROL,0x0433,""),
    IO_CAPABILITY_REQUEST_NEGATIVE_REPLY(OpcodeGroupField.LINK_CONTROL,0x0434,""),
    ENHANCED_SETUP_SYNCHRONOUS_CONNECTION(OpcodeGroupField.LINK_CONTROL,0x043D,""),
    ENHANCED_ACCEPT_SYNCHRONOUS_CONNECTION(OpcodeGroupField.LINK_CONTROL,0x043E,""),
    REMOTE_OOB_EXTENDED_DATA_REQUEST_REPLY(OpcodeGroupField.LINK_CONTROL,0x0445,""),
    HOLD_MODE(OpcodeGroupField.LINK_POLICY,0x0801,"Command to place the current or remote device into the Hold mode state."),
    SNIFF_MODE(OpcodeGroupField.LINK_POLICY,0x0803,"Command to place the current or remote device into the Sniff mode state."),
    EXIT_SNIFF_MODE(OpcodeGroupField.LINK_POLICY,0x0804,"Command to exit the current or remote device from the Sniff mode state."),
    PARK_STATE(OpcodeGroupField.LINK_POLICY,0x0805,"Command to place the current or remote device into the Park mode state."),
    EXIT_PARK_STATE(OpcodeGroupField.LINK_POLICY,0x0806,"Command to exit the current or remote device from the Park mode state."),
    QOS_SETUP(OpcodeGroupField.LINK_POLICY,0x0807,"Command to setup the Quality of Service parameters of the device."),
    ROLE_DISCOVERY(OpcodeGroupField.LINK_POLICY,0x0809,"Command to determine the role of the device for a particular connection."),
    SWITCH_ROLE(OpcodeGroupField.LINK_POLICY,0x080B,"Command to allow the device to switch roles for a particular connection."),
    READ_LINK_POLICY_SETTINGS(OpcodeGroupField.LINK_POLICY,0x080C,"Command to determine the link policy that the LM can use to establish connections."),
    WRITE_LINK_POLICY_SETTINGS(OpcodeGroupField.LINK_POLICY,0x080D,"Command to set the link policy that the LM can use for a particular connection."),
    READ_DEFAULT_LINK_POLICY_SETTINGS(OpcodeGroupField.LINK_POLICY,0x080E,""),
    WRITE_DEFAULT_LINK_POLICY_SETTINGS(OpcodeGroupField.LINK_POLICY,0x080F,""),
    FLOW_SPECIFICATION(OpcodeGroupField.LINK_POLICY,0x0810,""),
    SNIFF_SUBRATING(OpcodeGroupField.LINK_POLICY,0x0811,""),
    SET_EVENT_MASK(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C01,"Command to set which events are generated by the HCI for the host."),
    RESET(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C03,"Command to reset the host controller, link manager and the radio module."),
    SET_EVENT_FILTER(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C05,"Command used by host to set the different types of event filters that the host needs to receive."),
    FLUSH(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C08,"Command used to flush all pending data packets for transmission for a particular connection handle."),
    READ_PIN_TYPE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C09,"Command used by host to determine if the link manager assumes that the host requires a variable PIN type or fixed PIN code. PIN is used during pairing."),
    WRITE_PIN_TYPE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C0A,"Command used by host to write to the host controller on the PIN type supported by the host."),
    CREATE_NEW_UNIT_KEY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C0B,"Command used to create a new unit key."),
    READ_STORED_LINK_KEY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C0D,"Command to read the link key stored in the host controller."),
    WRITE_STORED_LINK_KEY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C11,"Command to write the link key to the host controller."),
    DELETE_STORED_LINK_KEY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C12,"Command to delete a stored link key in the host controller."),
    WRITE_LOCAL_NAME(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C13,"Command to modify the user friendly name of the device."),
    READ_LOCAL_NAME(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C14,"Command to read the user friendly name of the device."),
    READ_CONNECTION_ACCEPT_TIMEOUT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C15,"Command to determine the timeout session before the host denies and rejects a new connection request."),
    WRITE_CONNECTION_ACCEPT_TIMEOUT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C16,"Command to set the timeout session before a device can deny or reject a connection request."),
    READ_PAGE_TIMEOUT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C17,"Command to read the timeout value where a device will wait for a connection acceptance before sending a connection failure is returned."),
    WRITE_PAGE_TIMEOUT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C18,"Command to write the timeout value where a device will wait for a connection acceptance before sending a connection failure is returned."),
    READ_SCAN_ENABLE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C19,"Command to read the status of the Scan_Enable configuration."),
    WRITE_SCAN_ENABLE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C1A,"Command to set the status of the Scan_Enable configuration."),
    READ_PAGE_SCAN_ACTIVITY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C1B,"Command to read the value of the Page_Scan_Interval and Page_Scan_Window configurations."),
    WRITE_PAGE_SCAN_ACTIVITY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C1C,"Command to write the value of the Page_Scan_Interval and Page_Scan_Window configurations."),
    READ_INQUIRY_SCAN_ACTIVITY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C1D,"Command to read the value of the Inquiry_Scan_Interval and Inquiry_Scan_Window configurations."),
    WRITE_INQUIRY_SCAN_ACTIVITY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C1E,"Command to set the value of the Inquiry_Scan_Interval and Inquiry_Scan_Window configurations."),
    READ_AUTHENTICATION_ENABLE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C1F,"Command to read the Authentication_Enable parameter."),
    WRITE_AUTHENTICATION_ENABLE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C20,"Command to set the Authentication_Enable parameter."),
    READ_ENCRYPTION_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C21,"Command to read the Encryption_Mode parameter."),
    WRITE_ENCRYPTION_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C22,"Command to write the Encryption_Mode parameter."),
    READ_CLASS_OF_DEVICE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C23,"Command to read the Class_Of_Device parameter."),
    WRITE_CLASS_OF_DEVICE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C24,"Command to set the Class_Of_Device parameter."),
    READ_VOICE_SETTING(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C25,"Command to read the Voice_Setting parameter. Used for voice connections."),
    WRITE_VOICE_SETTING(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C26,"Command to set the Voice_Setting parameter. Used for voice connections."),
    READ_AUTOMATIC_FLUSH_TIMEOUT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C27,"Command to read the Flush_Timeout parameter. Used for ACL connections only."),
    WRITE_AUTOMATIC_FLUSH_TIMEOUT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C28,"Command to set the Flush_Timeout parameter. Used for ACL connections only."),
    READ_NUM_BROADCAST_RETRANSMITS(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C29,"Command to read the number of time a broadcast message is retransmitted."),
    WRITE_NUM_BROADCAST_RETRANSMITS(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C2A,"Command to set the number of time a broadcast message is retransmitted."),
    READ_HOLD_MODE_ACTIVITY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C2B,"Command to set the Hold_Mode activity to instruct the device to perform an activity during hold mode."),
    WRITE_HOLD_MODE_ACTIVITY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C2C,"Command to set the Hold_Mode_Activity parameter."),
    READ_TRANSMIT_POWER_LEVEL(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C2D,"Command to read the power level required for transmission for a connection handle."),
    READ_SYNCHRONOUS_FLOW_CONTROL_ENABLE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C2E,"Command to check the current status of the flow control for the SCO connection."),
    WRITE_SYNCHRONOUS_FLOW_CONTROL_ENABLE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C2F,"Command to set the status of the flow control for a connection handle."),
    SET_CONTROLLER_TO_HOST_FLOW_CONTROL(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C31,"Command to set the flow control from the host controller to host in on or off state."),
    HOST_BUFFER_SIZE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C33,"Command set by host to inform the host controller of the buffer size of the host for ACL and SCO connections."),
    HOST_NUM_COMPLETED_PACKETS(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C35,"Command set from host to host controller when it is ready to receive more data packets."),
    READ_LINK_SUPERVISION_TIMEOUT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C36,"Command to read the timeout for monitoring link losses."),
    WRITE_LINK_SUPERVISION_TIMEOUT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C37,"Command to set the timeout for monitoring link losses."),
    READ_NUMBER_OF_SUPPORTED_IAC(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C38,"Command to read the number of IACs that the device can listen on during Inquiry access."),
    READ_CURRENT_IAC_LAP(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C39,"Command to read the LAP for the current IAC."),
    WRITE_CURRENT_IAC_LAP(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C3A,"Command to set the LAP for the current IAC."),
    READ_PAGE_SCAN_PERIOD_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C3B,"Command to read the timeout session of a page scan."),
    WRITE_PAGE_SCAN_PERIOD_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C3C,"Command to set the timeout session of a page scan."),
    READ_PAGE_SCAN_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C3D,"Command to read the default Page scan mode."),
    WRITE_PAGE_SCAN_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C3E,"Command to set the default page scan mode."),
    SET_AFH_HOST_CHANNEL_CLASSIFICATION(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C3F,""),
    READ_INQUIRY_SCAN_TYPE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C42,""),
    WRITE_INQUIRY_SCAN_TYPE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C43,""),
    READ_INQUIRY_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C44,""),
    WRITE_INQUIRY_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C45,""),
    READ_PAGE_SCAN_TYPE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C46,""),
    WRITE_PAGE_SCAN_TYPE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C47,""),
    READ_AFH_CHANNEL_ASSESSMENT_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C48,""),
    WRITE_AFH_CHANNEL_ASSESSMENT_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C49,""),
    READ_EXTENDED_INQUIRY_RESPONSE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C51,""),
    WRITE_EXTENDED_INQUIRY_RESPONSE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C52,""),
    REFRESH_ENCRYPTION_KEY(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C53,""),
    READ_SIMPLE_PAIRING_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C55,""),
    WRITE_SIMPLE_PAIRING_MODE(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C56,""),
    READ_LOCAL_OOB_DATA(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C57,""),
    READ_INQUIRY_RESPONSE_TRANSMIT_POWER_LEVEL(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C58,""),
    WRITE_INQUIRY_TRANSMIT_POWER_LEVEL(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C59,""),
    ENHANCED_FLUSH(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C5F,""),
    SEND_KEYPRESS_NOTIFICATION(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C60,""),
    READ_LE_HOST_SUPPORT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C6C,""),
    WRITE_LE_HOST_SUPPORT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C6D,""),
    READ_SECURE_CONNECTIONS_HOST_SUPPORT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C79,""),
    WRITE_SECURE_CONNECTIONS_HOST_SUPPORT(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C7A,""),
    READ_LOCAL_OOB_EXTENDED_DATA(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C7D,""),
    SET_ECOSYSTEM_BASE_INTERVAL(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C82,""),
    CONFIGURE_DATA_PATH(OpcodeGroupField.CONTROLLER_AND_BASEBAND,0x0C83,""),
    READ_LOCAL_VERSION_INFORMATION(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x1001,""),
    READ_LOCAL_SUPPORTED_COMMANDS(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x1002,""),
    READ_LOCAL_SUPPORTED_FEATURES(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x1003,""),
    READ_LOCAL_EXTENDED_FEATURES(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x1004,""),
    READ_BUFFER_SIZE(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x1005,""),
    READ_COUNTRY_CODE(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x1007,""),
    READ_BD_ADDR(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x1009,""),
    READ_DATA_BLOCK_SIZE(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x100A,""),
    READ_LOCAL_SUPPORTED_CODECS_V1(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x100B,""),
    READ_LOCAL_SUPPORTED_CODECS_V2(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x100D,""),
    READ_LOCAL_SUPPORTED_CODEC_CAPABILITIES(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x100E,""),
    READ_LOCAL_SUPPORTED_CONTROLLER_DELAY(OpcodeGroupField.INFORMATIONAL_PARAMETERS,0x100F,""),
    READ_FAILED_CONTACT_COUNTER(OpcodeGroupField.STATUS_PARAMETERS,0x1401,""),
    RESET_FAILED_CONTACT_COUNTER(OpcodeGroupField.STATUS_PARAMETERS,0x1402,""),
    READ_LINK_QUALITY(OpcodeGroupField.STATUS_PARAMETERS,0x1403,""),
    READ_RSSI(OpcodeGroupField.STATUS_PARAMETERS,0x1405,""),
    READ_AFH_CHANNEL_MAP(OpcodeGroupField.STATUS_PARAMETERS,0x1406,""),
    READ_CLOCK(OpcodeGroupField.STATUS_PARAMETERS,0x1407,""),
    READ_ENCRYPTION_KEY_SIZE(OpcodeGroupField.STATUS_PARAMETERS,0x1408,""),
    READ_LOOPBACK_MODE(OpcodeGroupField.TESTING,0x1801,""),
    WRITE_LOOPBACK_MODE(OpcodeGroupField.TESTING,0x1802,""),
    ENABLE_DEVICE_UNDER_TEST_MODE(OpcodeGroupField.TESTING,0x1803,""),
    WRITE_SIMPLE_PAIRING_DEBUG_MODE(OpcodeGroupField.TESTING,0x1804,""),
    WRITE_SECURE_CONNECTIONS_TEST_MODE(OpcodeGroupField.TESTING,0x180A,""),
    LE_SET_EVENT_MASK(OpcodeGroupField.LE_CONTROLLER,0x2001,""),
    LE_READ_BUFFER_SIZE_V1(OpcodeGroupField.LE_CONTROLLER,0x2002,""),
    LE_READ_LOCAL_SUPPORTED_FEATURES(OpcodeGroupField.LE_CONTROLLER,0x2003,""),
    LE_SET_RANDOM_ADDRESS(OpcodeGroupField.LE_CONTROLLER,0x2005,""),
    LE_SET_ADVERTISING_PARAMETERS(OpcodeGroupField.LE_CONTROLLER,0x2006,""),
    LE_READ_ADVERTISING_PHYSICAL_CHANNEL_TX_POWER(OpcodeGroupField.LE_CONTROLLER,0x2007,""),
    LE_SET_ADVERTISING_DATA(OpcodeGroupField.LE_CONTROLLER,0x2008,""),
    LE_SET_SCAN_RESPONSE_DATA(OpcodeGroupField.LE_CONTROLLER,0x2009,""),
    LE_SET_ADVERTISE_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x200A,""),
    LE_SET_SCAN_PARAMETERS(OpcodeGroupField.LE_CONTROLLER,0x200B,""),
    LE_SET_SCAN_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x200C,""),
    LE_CREATE_CONNECTION(OpcodeGroupField.LE_CONTROLLER,0x200D,""),
    LE_CREATE_CONNECTION_CANCEL(OpcodeGroupField.LE_CONTROLLER,0x200E,""),
    LE_READ_CONNECT_LIST_SIZE(OpcodeGroupField.LE_CONTROLLER,0x200F,""),
    LE_CLEAR_CONNECT_LIST(OpcodeGroupField.LE_CONTROLLER,0x2010,""),
    LE_ADD_DEVICE_TO_CONNECT_LIST(OpcodeGroupField.LE_CONTROLLER,0x2011,""),
    LE_REMOVE_DEVICE_FROM_CONNECT_LIST(OpcodeGroupField.LE_CONTROLLER,0x2012,""),
    LE_CONNECTION_UPDATE(OpcodeGroupField.LE_CONTROLLER,0x2013,""),
    LE_SET_HOST_CHANNEL_CLASSIFICATION(OpcodeGroupField.LE_CONTROLLER,0x2014,""),
    LE_READ_CHANNEL_MAP(OpcodeGroupField.LE_CONTROLLER,0x2015,""),
    LE_READ_REMOTE_FEATURES(OpcodeGroupField.LE_CONTROLLER,0x2016,""),
    LE_ENCRYPT(OpcodeGroupField.LE_CONTROLLER,0x2017,""),
    LE_RAND(OpcodeGroupField.LE_CONTROLLER,0x2018,""),
    LE_START_ENCRYPTION(OpcodeGroupField.LE_CONTROLLER,0x2019,""),
    LE_LONG_TERM_KEY_REQUEST_REPLY(OpcodeGroupField.LE_CONTROLLER,0x201A,""),
    LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY(OpcodeGroupField.LE_CONTROLLER,0x201B,""),
    LE_READ_SUPPORTED_STATES(OpcodeGroupField.LE_CONTROLLER,0x201C,""),
    LE_RECEIVER_TEST(OpcodeGroupField.LE_CONTROLLER,0x201D,""),
    LE_TRANSMITTER_TEST(OpcodeGroupField.LE_CONTROLLER,0x201E,""),
    LE_TEST_END(OpcodeGroupField.LE_CONTROLLER,0x201F,""),
    LE_REMOTE_CONNECTION_PARAMETER_REQUEST_REPLY(OpcodeGroupField.LE_CONTROLLER,0x2020,""),
    LE_REMOTE_CONNECTION_PARAMETER_REQUEST_NEGATIVE_REPLY(OpcodeGroupField.LE_CONTROLLER,0x2021,""),
    LE_SET_DATA_LENGTH(OpcodeGroupField.LE_CONTROLLER,0x2022,""),
    LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH(OpcodeGroupField.LE_CONTROLLER,0x2023,""),
    LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH(OpcodeGroupField.LE_CONTROLLER,0x2024,""),
    LE_READ_LOCAL_P_256_PUBLIC_KEY_COMMAND(OpcodeGroupField.LE_CONTROLLER,0x2025,""),
    LE_GENERATE_DHKEY_COMMAND_V1(OpcodeGroupField.LE_CONTROLLER,0x2026,""),
    LE_ADD_DEVICE_TO_RESOLVING_LIST(OpcodeGroupField.LE_CONTROLLER,0x2027,""),
    LE_REMOVE_DEVICE_FROM_RESOLVING_LIST(OpcodeGroupField.LE_CONTROLLER,0x2028,""),
    LE_CLEAR_RESOLVING_LIST(OpcodeGroupField.LE_CONTROLLER,0x2029,""),
    LE_READ_RESOLVING_LIST_SIZE(OpcodeGroupField.LE_CONTROLLER,0x202A,""),
    LE_READ_PEER_RESOLVABLE_ADDRESS(OpcodeGroupField.LE_CONTROLLER,0x202B,""),
    LE_READ_LOCAL_RESOLVABLE_ADDRESS(OpcodeGroupField.LE_CONTROLLER,0x202C,""),
    LE_SET_ADDRESS_RESOLUTION_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x202D,""),
    LE_SET_RESOLVABLE_PRIVATE_ADDRESS_TIMEOUT(OpcodeGroupField.LE_CONTROLLER,0x202E,""),
    LE_READ_MAXIMUM_DATA_LENGTH(OpcodeGroupField.LE_CONTROLLER,0x202F,""),
    LE_READ_PHY(OpcodeGroupField.LE_CONTROLLER,0x2030,""),
    LE_SET_DEFAULT_PHY(OpcodeGroupField.LE_CONTROLLER,0x2031,""),
    LE_SET_PHY(OpcodeGroupField.LE_CONTROLLER,0x2032,""),
    LE_ENHANCED_RECEIVER_TEST(OpcodeGroupField.LE_CONTROLLER,0x2033,""),
    LE_ENHANCED_TRANSMITTER_TEST(OpcodeGroupField.LE_CONTROLLER,0x2034,""),
    LE_SET_EXTENDED_ADVERTISING_RANDOM_ADDRESS(OpcodeGroupField.LE_CONTROLLER,0x2035,""),
    LE_SET_EXTENDED_ADVERTISING_PARAMETERS(OpcodeGroupField.LE_CONTROLLER,0x2036,""),
    LE_SET_EXTENDED_ADVERTISING_DATA(OpcodeGroupField.LE_CONTROLLER,0x2037,""),
    LE_SET_EXTENDED_ADVERTISING_SCAN_RESPONSE(OpcodeGroupField.LE_CONTROLLER,0x2038,""),
    LE_SET_EXTENDED_ADVERTISING_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x2039,""),
    LE_READ_MAXIMUM_ADVERTISING_DATA_LENGTH(OpcodeGroupField.LE_CONTROLLER,0x203A,""),
    LE_READ_NUMBER_OF_SUPPORTED_ADVERTISING_SETS(OpcodeGroupField.LE_CONTROLLER,0x203B,""),
    LE_REMOVE_ADVERTISING_SET(OpcodeGroupField.LE_CONTROLLER,0x203C,""),
    LE_CLEAR_ADVERTISING_SETS(OpcodeGroupField.LE_CONTROLLER,0x203D,""),
    LE_SET_PERIODIC_ADVERTISING_PARAM(OpcodeGroupField.LE_CONTROLLER,0x203E,""),
    LE_SET_PERIODIC_ADVERTISING_DATA(OpcodeGroupField.LE_CONTROLLER,0x203F,""),
    LE_SET_PERIODIC_ADVERTISING_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x2040,""),
    LE_SET_EXTENDED_SCAN_PARAMETERS(OpcodeGroupField.LE_CONTROLLER,0x2041,""),
    LE_SET_EXTENDED_SCAN_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x2042,""),
    LE_EXTENDED_CREATE_CONNECTION(OpcodeGroupField.LE_CONTROLLER,0x2043,""),
    LE_PERIODIC_ADVERTISING_CREATE_SYNC(OpcodeGroupField.LE_CONTROLLER,0x2044,""),
    LE_PERIODIC_ADVERTISING_CREATE_SYNC_CANCEL(OpcodeGroupField.LE_CONTROLLER,0x2045,""),
    LE_PERIODIC_ADVERTISING_TERMINATE_SYNC(OpcodeGroupField.LE_CONTROLLER,0x2046,""),
    LE_ADD_DEVICE_TO_PERIODIC_ADVERTISING_LIST(OpcodeGroupField.LE_CONTROLLER,0x2047,""),
    LE_REMOVE_DEVICE_FROM_PERIODIC_ADVERTISING_LIST(OpcodeGroupField.LE_CONTROLLER,0x2048,""),
    LE_CLEAR_PERIODIC_ADVERTISING_LIST(OpcodeGroupField.LE_CONTROLLER,0x2049,""),
    LE_READ_PERIODIC_ADVERTISING_LIST_SIZE(OpcodeGroupField.LE_CONTROLLER,0x204A,""),
    LE_READ_TRANSMIT_POWER(OpcodeGroupField.LE_CONTROLLER,0x204B,""),
    LE_READ_RF_PATH_COMPENSATION_POWER(OpcodeGroupField.LE_CONTROLLER,0x204C,""),
    LE_WRITE_RF_PATH_COMPENSATION_POWER(OpcodeGroupField.LE_CONTROLLER,0x204D,""),
    LE_SET_PRIVACY_MODE(OpcodeGroupField.LE_CONTROLLER,0x204E,""),
    LE_SET_PERIODIC_ADVERTISING_RECEIVE_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x2059,""),
    LE_PERIODIC_ADVERTISING_SYNC_TRANSFER(OpcodeGroupField.LE_CONTROLLER,0x205A,""),
    LE_PERIODIC_ADVERTISING_SET_INFO_TRANSFER(OpcodeGroupField.LE_CONTROLLER,0x205B,""),
    LE_SET_PERIODIC_ADVERTISING_SYNC_TRANSFER_PARAMETERS(OpcodeGroupField.LE_CONTROLLER,0x205C,""),
    LE_SET_DEFAULT_PERIODIC_ADVERTISING_SYNC_TRANSFER_PARAMETERS(OpcodeGroupField.LE_CONTROLLER,0x205D,""),
    LE_GENERATE_DHKEY_COMMAND(OpcodeGroupField.LE_CONTROLLER,0x205E,""),
    LE_MODIFY_SLEEP_CLOCK_ACCURACY(OpcodeGroupField.LE_CONTROLLER,0x205F,""),
    LE_READ_BUFFER_SIZE_V2(OpcodeGroupField.LE_CONTROLLER,0x2060,""),
    LE_READ_ISO_TX_SYNC(OpcodeGroupField.LE_CONTROLLER,0x2061,""),
    LE_SET_CIG_PARAMETERS(OpcodeGroupField.LE_CONTROLLER,0x2062,""),
    LE_SET_CIG_PARAMETERS_TEST(OpcodeGroupField.LE_CONTROLLER,0x2063,""),
    LE_CREATE_CIS(OpcodeGroupField.LE_CONTROLLER,0x2064,""),
    LE_REMOVE_CIG(OpcodeGroupField.LE_CONTROLLER,0x2065,""),
    LE_ACCEPT_CIS_REQUEST(OpcodeGroupField.LE_CONTROLLER,0x2066,""),
    LE_REJECT_CIS_REQUEST(OpcodeGroupField.LE_CONTROLLER,0x2067,""),
    LE_CREATE_BIG(OpcodeGroupField.LE_CONTROLLER,0x2068,""),
    LE_TERMINATE_BIG(OpcodeGroupField.LE_CONTROLLER,0x206A,""),
    LE_BIG_CREATE_SYNC(OpcodeGroupField.LE_CONTROLLER,0x206B,""),
    LE_BIG_TERMINATE_SYNC(OpcodeGroupField.LE_CONTROLLER,0x206C,""),
    LE_REQUEST_PEER_SCA(OpcodeGroupField.LE_CONTROLLER,0x206D,""),
    LE_SETUP_ISO_DATA_PATH(OpcodeGroupField.LE_CONTROLLER,0x206E,""),
    LE_REMOVE_ISO_DATA_PATH(OpcodeGroupField.LE_CONTROLLER,0x206F,""),
    LE_SET_HOST_FEATURE(OpcodeGroupField.LE_CONTROLLER,0x2074,""),
    LE_READ_ISO_LINK_QUALITY(OpcodeGroupField.LE_CONTROLLER,0x2075,""),
    LE_ENHANCED_READ_TRANSMIT_POWER_LEVEL(OpcodeGroupField.LE_CONTROLLER,0x2076,""),
    LE_READ_REMOTE_TRANSMIT_POWER_LEVEL(OpcodeGroupField.LE_CONTROLLER,0x2077,""),
    LE_SET_PATH_LOSS_REPORTING_PARAMETERS(OpcodeGroupField.LE_CONTROLLER,0x2078,""),
    LE_SET_PATH_LOSS_REPORTING_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x2079,""),
    LE_SET_TRANSMIT_POWER_REPORTING_ENABLE(OpcodeGroupField.LE_CONTROLLER,0x207A,""),
    LE_GET_VENDOR_CAPABILITIES(OpcodeGroupField.VENDOR_SPECIFIC,0xFD53,""),
    LE_MULTI_ADVT(OpcodeGroupField.VENDOR_SPECIFIC,0xFD54,""),
    LE_BATCH_SCAN(OpcodeGroupField.VENDOR_SPECIFIC,0xFD56,""),
    LE_ADV_FILTER(OpcodeGroupField.VENDOR_SPECIFIC,0xFD57,""),
    LE_ENERGY_INFO(OpcodeGroupField.VENDOR_SPECIFIC,0xFD59,""),
    LE_EXTENDED_SCAN_PARAMS(OpcodeGroupField.VENDOR_SPECIFIC,0xFD5A,""),
    CONTROLLER_DEBUG_INFO(OpcodeGroupField.VENDOR_SPECIFIC,0xFD5B,""),
    CONTROLLER_A2DP_OPCODE(OpcodeGroupField.VENDOR_SPECIFIC,0xFD5D,""),
    CONTROLLER_BQR(OpcodeGroupField.VENDOR_SPECIFIC,0xFD5E,"");

    private static final Map<Integer, CommandCode> byCode = new HashMap<>();
    static {
        for (CommandCode e : CommandCode.values()) {
            if (byCode.put(e.getCode(), e) != null) {
                throw new IllegalArgumentException("duplicate code: " + e.getCode());
            }
        }
    }

    public static CommandCode get(Integer code) {
        return byCode.get(code);
    }
    private final int code;
    private final String description;

    CommandCode(OpcodeGroupField ogf, int code, String description)
    {
        this.code = code;
        this.description = description;
    }

    public int getCode() {
        return code;
    }
}
